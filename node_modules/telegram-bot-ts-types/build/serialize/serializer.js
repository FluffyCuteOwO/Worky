"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var input_file_1 = require("../entities/input_file");
var formdata_node_1 = require("formdata-node");
var Serializer = /** @class */ (function () {
    function Serializer(c, className, params) {
        this.paramsCamelToSnakeCase = {};
        this.paramsSnakeToCamelCase = {};
        this.tConstructor = c;
        this.className = className;
        this.constructorParams = params;
        this.setJsonAndParamNamesRef(params);
        Serializer.Serializers[className] = this;
    }
    Serializer.prototype.setJsonAndParamNamesRef = function (params) {
        for (var param in params) {
            var snakeCase = param.replace(/\.?([A-Z])/g, function (x, y) { return "_" + y.toLowerCase(); })
                .replace(/^_/, "");
            this.paramsSnakeToCamelCase[snakeCase] = param;
            this.paramsCamelToSnakeCase[param] = snakeCase;
        }
    };
    Serializer.prototype.fromJson = function (json) {
        if (!(this.checkJson(json))) {
            throw new Error('Wrong json for type "' + this.className + '". Json: ' + json + '\n');
        }
        var params = {};
        for (var paramName in this.constructorParams) {
            var param = this.constructorParams[paramName];
            if (this.paramsCamelToSnakeCase[paramName] in json) {
                var newParam = json[this.paramsCamelToSnakeCase[paramName]];
                try {
                    newParam = this.deserialize(newParam, param.type);
                    if (newParam === null) {
                        continue;
                    }
                }
                catch (e) {
                    continue;
                }
                params[paramName] = newParam;
            }
        }
        return new this.tConstructor(params);
    };
    Serializer.prototype.deserialize = function (value, type) {
        if (type in Serializer.Serializers) {
            return Serializer.Serializers[type].fromJson(value);
        }
        if (type.indexOf(' | ') !== -1) {
            var params = type.split(' | ');
            for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
                var currType = params_1[_i];
                try {
                    return this.deserialize(value, currType.trim());
                }
                catch (e) { }
            }
            return null;
        }
        if (type[type.length - 2] === '[' && type[type.length - 1] === ']') {
            if (!Array.isArray(value)) {
                throw new Error('Wrong json for type array "' + this.className + '". Json: ' + JSON.stringify(value) + '\n');
            }
            var result = [];
            for (var _a = 0, value_1 = value; _a < value_1.length; _a++) {
                var element = value_1[_a];
                try {
                    result.push(this.deserialize(element, type.slice(0, type.length - 2)));
                }
                catch (e) { }
            }
            return result;
        }
        return value;
    };
    Serializer.prototype.checkJson = function (json) {
        var _this = this;
        return (json !== null &&
            typeof json === 'object' &&
            Object.keys(this.constructorParams).every(function (p) { return !_this.constructorParams[p].required || _this.paramsCamelToSnakeCase[p] in json; }) &&
            Object.keys(json).every(function (p) { return _this.paramsSnakeToCamelCase[p] in _this.constructorParams; }));
    };
    Serializer.prototype.checkParamsAndReturnInSnakeCaseIfOk = function (params) {
        var _this = this;
        var ok = (params !== null &&
            typeof params === 'object' &&
            Object.keys(this.constructorParams).every(function (p) { return !_this.constructorParams[p].required || p in params; }) &&
            Object.keys(params).every(function (p) { return p in _this.constructorParams; }));
        if (!ok) {
            return { ok: false };
        }
        var snakeParams = {};
        for (var param in params) {
            snakeParams[this.paramsCamelToSnakeCase[param]] = params[param];
        }
        return {
            ok: true,
            params: snakeParams
        };
    };
    Serializer.prototype.toFormData = function (model) {
        var formData = new formdata_node_1.default();
        var serialized = this.toJsonObject(model, formData);
        for (var param in serialized) {
            var val = serialized[param];
            if (typeof val === 'object') {
                val = JSON.stringify(val);
            }
            formData.set(param, val);
        }
        return formData;
    };
    Serializer.prototype.toJsonString = function (model) {
        return JSON.stringify(this.toJsonObject(model));
    };
    Serializer.prototype.toJsonObject = function (model, formData) {
        var json = {};
        var jsonModel = model;
        for (var paramName in this.constructorParams) {
            var param = this.constructorParams[paramName];
            if (typeof jsonModel[paramName] !== 'undefined' && jsonModel[paramName] !== null) {
                var newParam = jsonModel[paramName];
                if (newParam instanceof input_file_1.default) {
                    if (!(formData instanceof formdata_node_1.default)) {
                        throw new Error('You can\'t serialize Buffer to json. Use "multipart/form-data" instead');
                    }
                    var countFiles = 0;
                    var countFilesFromFormData = formData.get('files__count');
                    if (typeof countFilesFromFormData === 'string') {
                        if (!Number.isNaN(parseInt(countFilesFromFormData))) {
                            countFiles = parseInt(countFilesFromFormData);
                        }
                    }
                    formData.append('file__' + (++countFiles), newParam.file, newParam.name);
                    formData.set('files__count', countFiles.toString());
                    json[this.paramsCamelToSnakeCase[paramName]] = 'attach://file__' + countFiles;
                    continue;
                }
                try {
                    newParam = this.serialize(newParam, param.type);
                    if (newParam === null) {
                        continue;
                    }
                }
                catch (e) {
                    continue;
                }
                json[this.paramsCamelToSnakeCase[paramName]] = newParam;
            }
        }
        if (!(this.checkJson(json))) {
            throw new Error('Wrong json for type "' + this.className + '". Json: ' + json + '\n');
        }
        return json;
    };
    Serializer.prototype.serialize = function (value, type) {
        if (type in Serializer.Serializers) {
            return Serializer.Serializers[type].toJsonObject(value);
        }
        if (type.indexOf(' | ') !== -1) {
            var params = type.split(' | ');
            for (var _i = 0, params_2 = params; _i < params_2.length; _i++) {
                var currType = params_2[_i];
                try {
                    return this.serialize(value, currType.trim());
                }
                catch (e) { }
            }
            return null;
        }
        if (type[type.length - 2] === '[' && type[type.length - 1] === ']') {
            if (!Array.isArray(value)) {
                throw new Error('Wrong json for type array "' + this.className + '". Json: ' + JSON.stringify(value) + '\n');
            }
            var result = [];
            for (var _a = 0, value_2 = value; _a < value_2.length; _a++) {
                var element = value_2[_a];
                try {
                    result.push(this.serialize(element, type.slice(0, type.length - 2)));
                }
                catch (e) { }
            }
            return result;
        }
        return value;
    };
    Serializer.Serializers = {};
    return Serializer;
}());
exports.Serializer = Serializer;
exports.default = Serializer;
//# sourceMappingURL=serializer.js.map