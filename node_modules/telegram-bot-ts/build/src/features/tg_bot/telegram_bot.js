"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var telegram_client_1 = require("./data/datasources/telegram_client");
var api_user_remote_datasource_1 = require("./data/datasources/api_user_remote_datasource");
var api_message_remote_datasource_1 = require("./data/datasources/api_message_remote_datasource");
var long_poll_get_updates_1 = require("./domain/usecases/long_poll_get_updates");
var telegram_repostiry_impl_1 = require("./data/repositories/telegram_repostiry_impl");
var failures_1 = require("../../core/failures");
var usecase_1 = require("../../core/usecases/usecase");
var telegram_bot_methods_1 = require("./presentation/mixins/telegram_bot_methods");
var mixins_1 = require("../../core/mixins");
var telegram_bot_pubsub_1 = require("./presentation/mixins/telegram_bot_pubsub");
var TelegramBot = /** @class */ (function () {
    function TelegramBot(botToken) {
        this.botToken = botToken;
        this.init();
    }
    TelegramBot.prototype.init = function () {
        //!
        var telegramApiClient = new telegram_client_1.TelegramApiClient(this.botToken);
        //!
        var apiUserRemoteDatasourceImpl = new api_user_remote_datasource_1.ApiUserRemoteDatasourceImpl(telegramApiClient);
        var apiMessageRemoteDatasourceImpl = new api_message_remote_datasource_1.ApiMessageRemoteDatasourceImpl(telegramApiClient);
        //!
        var telegramRepository = new telegram_repostiry_impl_1.default(apiMessageRemoteDatasourceImpl, apiUserRemoteDatasourceImpl);
        //!
        this.initUseCases(telegramRepository);
        this.longPollGetUpdates = new long_poll_get_updates_1.LongPollGetUpdates(telegramRepository, 0);
        this.initPubSub();
    };
    TelegramBot.prototype.startLongPoll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var responseMe, countErrors, updates, _i, updates_1, update;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMe()];
                    case 1:
                        responseMe = _a.sent();
                        if (responseMe instanceof failures_1.Failure) {
                            if (responseMe instanceof failures_1.FailureUnauthorized) {
                                throw new Error('Wrong bot token');
                            }
                            throw new Error(responseMe.getMessage());
                        }
                        countErrors = 0;
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.longPollGetUpdates.execute(new usecase_1.NoParams())];
                    case 3:
                        updates = _a.sent();
                        if (updates instanceof failures_1.Failure) {
                            countErrors++;
                            if (countErrors > 9) {
                                throw new Error(updates.getMessage());
                            }
                            return [3 /*break*/, 2];
                        }
                        countErrors = 0;
                        for (_i = 0, updates_1 = updates; _i < updates_1.length; _i++) {
                            update = updates_1[_i];
                            this.botTelegramPublisher.publish(update);
                        }
                        return [3 /*break*/, 2];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return TelegramBot;
}());
mixins_1.default(TelegramBot, [telegram_bot_methods_1.default, telegram_bot_pubsub_1.default]);
exports.default = TelegramBot;
//# sourceMappingURL=telegram_bot.js.map