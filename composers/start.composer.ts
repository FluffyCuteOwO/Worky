// –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∫–ª–∞—Å—Å–æ–≤
import {Composer, Markup} from "telegraf";
import {College} from "../database/entity/College";

// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ö–æ–º–ø–æ—Å—Ç–µ—Ä (–ø–æ—á—Ç–∏ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ üôÇ)
let composer = new Composer();

// –î–µ–π—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –Ω–∞ /start
composer.start(async (ctx) => {
    ctx.reply(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç Worky –∏ —è –ø–æ–º–æ–≥—É –í–∞–º —Å –ø–æ–¥–±–æ—Ä–æ–º –≤–∞–∫–∞–Ω—Å–∏–π! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        Markup.inlineKeyboard([
            Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π', 'mainMenuButton'),
        ])
    );
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    if (!college) {
        await College.create({
            userID: ctx.message.chat.id.toString()
        }).save()
    }
});

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
module.exports = composer