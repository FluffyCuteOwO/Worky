// –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∫–ª–∞—Å—Å–æ–≤
import {Composer, Markup} from "telegraf";
import {bot} from "../index";
import {College} from "../database/entity/College";
import axios from "axios";

// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ö–æ–º–ø–æ—Å—Ç–µ—Ä (–ø–æ—á—Ç–∏ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ üôÇ)
let composer = new Composer();

// –ú–∞—Å—Å–∏–≤—ã –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
let Schedutels = ["C", "C#", "C++", "Java", "1C", "SQL", "Python", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä–∞—Ñ–∏–∫–∞"]
let Graphic = ["–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å", "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä–∞—Ñ–∏–∫–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"]
let zarPlata = ['–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞', '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã']
let experience = ['–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è', '–æ—Ç 120000 —Ä—É–±', '–æ—Ç 215000 —Ä—É–±', '–æ—Ç 310000 —Ä—É–±', '–æ—Ç 405000 —Ä—É–±', '–æ—Ç 500000 —Ä—É–±', '–£–∫–∞–∑–∞–Ω –¥–æ—Ö–æ–¥']
let answers = ['–ù–µ—Ç –æ–ø—ã—Ç–∞', '–û—Ç 1-3 –ª–µ—Ç', '–û—Ç 3-6 –ª–µ—Ç', '–ë–æ–ª—å—à–µ 6 –ª–µ—Ç', 'C', 'C#']
let inProgress = ['üòé –ò–Ω–∂–µ–Ω–µ—Ä', '‚ò∏ –≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', 'üìû –ê–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö', 'üì¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ–ª–µ–∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è–º', '‚≠êÔ∏è –¢–µ—Ö–Ω–∏–∫ –ø–æ –∫–æ–º–ø.—Å–µ—Ç—è–º', 'üë• Share'];

//–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
bot.hears(inProgress, async ctx => ctx.reply('–î–∞–Ω–Ω–æ–µ –º–µ–Ω—é –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'))

// –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π', async ctx =>{
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", Markup
        .keyboard([
            ['üîç –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', 'üòé –ò–Ω–∂–µ–Ω–µ—Ä'],
            ['‚ò∏ –≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', 'üìû –ê–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö'],
            ['üì¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ–ª–µ–∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è–º', '‚≠êÔ∏è –¢–µ—Ö–Ω–∏–∫ –ø–æ –∫–æ–º–ø.—Å–µ—Ç—è–º', 'üë• Share']
        ])
        .oneTime()
        .resize()
    )
    return;
})

// –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
bot.hears(['üîç –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞'], async ctx =>{
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    if (ctx.message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"){
        college.proffesion = ctx.message.text; await college.save();
    }
    return await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", Markup
        .keyboard([
            ['C', 'C#', 'C++'],
            ['Java', '1C', 'SQL', 'Python'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π']
        ])
        .oneTime()
        .resize()
    )
})

// –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
bot.hears(Schedutels, async ctx =>{
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    if (ctx.message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä–∞—Ñ–∏–∫–∞"){
        college.launguage = ctx.message.text; await college.save();
    }
    return await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", Markup
        .keyboard([
            ['–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å', '–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫'],
            ['–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞']
        ])
        .oneTime()
        .resize()
    )
})

// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
bot.hears(Graphic, async ctx =>{
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    if (ctx.message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"){
        college.grafRabot = ctx.message.text; await college.save();
    }
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏", Markup
        .keyboard([
            ['–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å'],
            ['–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞', '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä–∞—Ñ–∏–∫–∞']
        ])
        .oneTime()
        .resize()
    )
    return;
})

// –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞
bot.hears(zarPlata, async ctx =>{
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    if (ctx.message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã"){
        college.typeZanatosti = ctx.message.text; await college.save();
    }
    return await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É", Markup
        .keyboard([
            ['–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è'],
            ['–æ—Ç 120000 —Ä—É–±', '–æ—Ç 215000 —Ä—É–±', '–æ—Ç 310000 —Ä—É–±'],
            ['–æ—Ç 405000 —Ä—É–±', '–æ—Ç 500000 —Ä—É–±', '–£–∫–∞–∑–∞–Ω –¥–æ—Ö–æ–¥'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏']
        ])
        .oneTime()
        .resize()
    )
})

// –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
bot.hears(experience, async ctx =>{
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    if (ctx.message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã") {
        college.zarPlata = ctx.message.text; await college.save();
    }
    return await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", Markup
        .keyboard([
            ['–ù–µ—Ç –æ–ø—ã—Ç–∞', '–û—Ç 1-3 –ª–µ—Ç'],
            ['–û—Ç 3-6 –ª–µ—Ç', '–ë–æ–ª—å—à–µ 6 –ª–µ—Ç'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã']
        ])
        .oneTime()
        .resize()
    )
})

// –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞
bot.hears(answers, async ctx =>{
    let linkapi = "https://api.hh.ru/vacancies?";
    let college = await College.findOne({ where: {userID: ctx.message.chat.id.toString()} })
    college.exp = ctx.message.text; await college.save();
    if (college.proffesion.concat("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç")){
        linkapi += `text=%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%20`
    }
    switch (college.launguage){
        case "C":
            linkapi += `C`
            break;
        case "C#":
            linkapi += `C#`
            break;
        case "C++":
            linkapi += `C++`
            break;
        case "Java":
            linkapi += `Java"`
            break;
        case "1C":
            linkapi += `1C"`
            break;
        case "SQL":
            linkapi += `SQL"`
            break;
        case "Python":
            linkapi += `Python"`
            break;
    }
    switch (college.grafRabot){
        case "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å":
            linkapi += `&schedule=fullDay`
            break;
        case "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
            linkapi += `&schedule=shift`
            break;
        case "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
            linkapi += `&schedule=remote`
            break;
        case "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫":
            linkapi += `&schedule=flexible`
            break;
    }
    switch (college.typeZanatosti){
        case "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
            linkapi += `&employment=full`
            break;
        case "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
            linkapi += `&employment=part`
            break;
        case "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞":
            linkapi += `&employment=probation`
            break;
        case "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
            linkapi += `&employment=project`
            break;
    }
    switch (college.exp){
        case "–ù–µ—Ç –æ–ø—ã—Ç–∞":
            linkapi += `&experience=noExperience`
            break;
        case "–û—Ç 1-3 –ª–µ—Ç":
            linkapi += `&experience=between1And3`
            break;
        case "–û—Ç 3-6 –ª–µ—Ç":
            linkapi += `&experience=between3And6`
            break;
        case "–ë–æ–ª—å—à–µ 6 –ª–µ—Ç":
            linkapi += `&experience=moreThan6`
            break;
    }
    linkapi += "&per_page=10"
    axios.get(linkapi).then(result => {
        console.log(result.data.items)
        for (let item of result.data.items){
            ctx.reply(`${item.alternate_url}`)
        }
    })
})

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
module.exports = composer